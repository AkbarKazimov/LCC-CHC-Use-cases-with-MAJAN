package dummy;




import com.google.code.geocoder.Geocoder;
import com.google.code.geocoder.GeocoderRequestBuilder;
import com.google.code.geocoder.model.*;
import com.google.gson.Gson;
import com.hp.hpl.jena.rdf.model.ModelFactoryBase;
import com.hp.hpl.jena.sparql.lang.SPARQLParser;
//import com.tenforce.semtech.SPARQLParser.SPARQL.InvalidSPARQLException;
//import com.tenforce.semtech.SPARQLParser.SPARQL.SPARQLQuery;
import org.apache.commons.httpclient.util.URIUtil;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.entity.BasicHttpEntity;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.InputStreamEntity;
import org.eclipse.rdf4j.IsolationLevels;
import org.eclipse.rdf4j.model.*;
import org.eclipse.rdf4j.model.impl.LinkedHashModel;
import org.eclipse.rdf4j.model.impl.SimpleBNode;
import org.eclipse.rdf4j.model.impl.SimpleNamespace;
import org.eclipse.rdf4j.model.impl.SimpleValueFactory;
import org.eclipse.rdf4j.model.util.ModelBuilder;
import org.eclipse.rdf4j.model.util.RDFCollections;
import org.eclipse.rdf4j.model.vocabulary.FOAF;
import org.eclipse.rdf4j.model.vocabulary.RDF;
import org.eclipse.rdf4j.model.vocabulary.RDFS;
/*import org.eclipse.rdf4j.query.Query;
import org.eclipse.rdf4j.query.QueryLanguage;
import org.eclipse.rdf4j.query.TupleQueryResult;
import org.eclipse.rdf4j.query.algebra.Datatype;
import org.eclipse.rdf4j.query.algebra.QueryModelVisitor;
import org.eclipse.rdf4j.query.algebra.TupleExpr;
import org.eclipse.rdf4j.query.algebra.helpers.QueryModelVisitorBase;
import org.eclipse.rdf4j.query.parser.ParsedOperation;
import org.eclipse.rdf4j.query.parser.ParsedQuery;
import org.eclipse.rdf4j.query.parser.QueryParser;
import org.eclipse.rdf4j.query.parser.QueryParserUtil;
import org.eclipse.rdf4j.query.parser.sparql.SPARQLParser;
import org.eclipse.rdf4j.query.parser.sparql.SPARQLParserFactory;
import org.eclipse.rdf4j.query.parser.sparql.SPARQLUtil;
import org.eclipse.rdf4j.repository.Repository;
import org.eclipse.rdf4j.repository.RepositoryConnection;
import org.eclipse.rdf4j.repository.RepositoryResult;
import org.eclipse.rdf4j.repository.http.HTTPRepository;
import org.eclipse.rdf4j.repository.manager.RemoteRepositoryManager;
import org.eclipse.rdf4j.repository.manager.RepositoryManager;
import org.eclipse.rdf4j.repository.sparql.SPARQLConnection;*/
import org.eclipse.rdf4j.rio.*;
import org.eclipse.rdf4j.rio.helpers.JSONLDMode;
import org.eclipse.rdf4j.rio.helpers.JSONLDSettings;
import org.eclipse.rdf4j.rio.helpers.RDFJSONParserSettings;
import org.eclipse.rdf4j.rio.helpers.RioSettingImpl;
import org.eclipse.rdf4j.rio.jsonld.JSONLDParser;
import org.eclipse.rdf4j.rio.jsonld.JSONLDWriter;
import org.eclipse.rdf4j.rio.jsonld.JSONLDWriterFactory;
//import org.eclipse.rdf4j.rio.turtle.TurtleParser;
import org.eclipse.rdf4j.sparqlbuilder.core.Prefix;
import org.eclipse.rdf4j.sparqlbuilder.core.Variable;
import org.eclipse.rdf4j.sparqlbuilder.core.query.ConstructQuery;
import org.eclipse.rdf4j.sparqlbuilder.core.query.Queries;
import org.eclipse.rdf4j.sparqlbuilder.core.query.SelectQuery;
import org.eclipse.rdf4j.sparqlbuilder.graphpattern.TriplePattern;
import org.xenei.jena.entities.EntityManager;
import org.xenei.jena.entities.EntityManagerFactory;
import org.xenei.jena.entities.MissingAnnotation;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Test {
    public static void main(String[] args){
        String s = "<http://localhost:8060/ajan/agents/majanAgent1> <http://www.ajan.de/ajan-ns#agentId>\n" +
"    \"majanAgent1\";\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasGender>\n" +
"    \"Male\";\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasLccGenderPreference>\n" +
"    \"Dont mind\";\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasLccNationPreference>\n" +
"    \"Same\";\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasNationality>\n" +
"    \"Nation1\" .\n" +
"\n" +
"<https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#1638966802499>\n" +
"  a <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#LCCLesson>;\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasAssessmentScore>\n" +
"    \"26\"^^<http://www.w3.org/2001/XMLSchema#float>;\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasLessonId>\n" +
"    1;\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasListeningScore>\n" +
"    \"9\"^^<http://www.w3.org/2001/XMLSchema#float>;\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasReadingScore>\n" +
"    \"10\"^^<http://www.w3.org/2001/XMLSchema#float>;\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasVocabularyScore>\n" +
"    \"11\"^^<http://www.w3.org/2001/XMLSchema#float>;\n" +
"  <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#hasWritingScore>\n" +
"    \"12\"^^<http://www.w3.org/2001/XMLSchema#float> .";
        
        String query = "\n" +
"					PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n" +
"					PREFIX ajan: <http://www.ajan.de/ajan-ns#>\n" +
"					PREFIX welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#>\n" +
"					PREFIX mac: <http://localhost:8090/rdf4j/repositories/ajan_mac_ontology#>\n" +
"					PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n" +
"					CONSTRUCT {\n" +
"						?subjectIri    rdf:type    welcome:LCCLesson ;\n" +
"											welcome:hasLessonId		?lessonId ;\n" +
"											welcome:hasAssessmentDeadline     ?assessmentDeadline .\n" +
"					}\n" +
"					WHERE {\n" +
"						?subjectIri    rdf:type    welcome:LCCLesson ;\n" +
"											welcome:hasLessonId		?lessonId ;\n" +
"											welcome:hasAssessmentDeadline     ?assessmentDeadline .	\n" +
"					}";
        

       // try {
            /*try {
            Model model = createModel(s);
            model = addNamespacesFromSparql(model, query);
            for(Namespace nms:model.getNamespaces()){
            System.out.println("nms:"+nms);
            }
            } catch (IOException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
            }*/
            //runJarFile();
            runJarEndpointTest();
        /*} catch (InterruptedException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        
    }
    
    public static void runJarEndpointTest(){
        String body = "Number of agents -> 10\n" +
"// Structure: {ID, value}\n" +
"Coalitions -> {0, -1000000.000000} | {1, -1000000.000000} | {2, -1000000.000000} | {3, -1000000.000000} | {4, -1000000.000000} | {5, -1000000.000000} | {6, -1000000.000000} | {7, -3.804853} | {8, -1000000.000000} | {9, -1000000.000000} | {10, -1000000.000000} | {11, -2.620366} | {12, -1000000.000000} | {13, -2.304853} | {14, -1.495366} | {15, -2.699593} | {16, -1000000.000000} | {17, -1000000.000000} | {18, -1000000.000000} | {19, -5.673757} | {20, -1000000.000000} | {21, -1000000.000000} | {22, -1000000.000000} | {23, -1000000.000000} | {24, -1000000.000000} | {25, -4.253359} | {26, -3.414061} | {27, -4.545983} | {28, -1000000.000000} | {29, -1000000.000000} | {30, -1000000.000000} | {31, -1000000.000000} | {32, -1000000.000000} | {33, -1000000.000000} | {34, -1000000.000000} | {35, -3.463959} | {36, -1000000.000000} | {37, -3.235492} | {38, -3.843017} | {39, -3.667740} | {40, -1000000.000000} | {41, -0.727176} | {42, -2.238404} | {43, -2.377839} | {44, -1.839281} | {45, -1.909735} | {46, -2.192793} | {47, -1000000.000000} | {48, -1000000.000000} | {49, -5.201144} | {50, -4.940876} | {51, -5.501785} | {52, -1000000.000000} | {53, -1000000.000000} | {54, -1000000.000000} | {55, -1000000.000000} | {56, -3.765406} | {57, -3.805965} | {58, -4.013162} | {59, -1000000.000000} | {60, -1000000.000000} | {61, -1000000.000000} | {62, -1000000.000000} | {63, -1000000.000000} | {64, -1000000.000000} | {65, -1000000.000000} | {66, -1000000.000000} | {67, -3.023030} | {68, -1000000.000000} | {69, -2.763861} | {70, -1.807668} | {71, -3.173991} | {72, -1000000.000000} | {73, -0.410699} | {74, -1.129623} | {75, -1.971476} | {76, -0.911376} | {77, -1.556755} | {78, -1.340385} | {79, -1000000.000000} | {80, -1000000.000000} | {81, -4.723873} | {82, -2.960387} | {83, -5.023914} | {84, -1000000.000000} | {85, -1000000.000000} | {86, -1000000.000000} | {87, -1000000.000000} | {88, -2.880337} | {89, -3.468609} | {90, -3.217204} | {91, -1000000.000000} | {92, -1000000.000000} | {93, -1000000.000000} | {94, -1000000.000000} | {95, -1000000.000000} | {96, -1000000.000000} | {97, -0.782065} | {98, -2.210387} | {99, -2.694758} | {100, -2.624790} | {101, -2.276986} | {102, -2.629164} | {103, -1000000.000000} | {104, -0.093502} | {105, -0.258906} | {106, -1.464039} | {107, -1000000.000000} | {108, -0.947355} | {109, -1000000.000000} | {110, -1000000.000000} | {111, -1000000.000000} | {112, -3.815876} | {113, -4.185167} | {114, -3.706207} | {115, -1000000.000000} | {116, -1000000.000000} | {117, -1000000.000000} | {118, -1000000.000000} | {119, -1000000.000000} | {120, -2.833279} | {121, -1000000.000000} | {122, -1000000.000000} | {123, -1000000.000000} | {124, -1000000.000000} | {125, -1000000.000000} | {126, -1000000.000000} | {127, -1000000.000000} | {128, -1000000.000000} | {129, -1000000.000000} | {130, -1000000.000000} | {131, -3.630337} | {132, -1000000.000000} | {133, -1000000.000000} | {134, -1000000.000000} | {135, -1000000.000000} | {136, -1000000.000000} | {137, -2.083063} | {138, -1.294641} | {139, -2.535112} | {140, -1000000.000000} | {141, -1000000.000000} | {142, -1000000.000000} | {143, -1000000.000000} | {144, -1000000.000000} | {145, -1000000.000000} | {146, -1000000.000000} | {147, -1000000.000000} | {148, -1000000.000000} | {149, -1000000.000000} | {150, -1000000.000000} | {151, -1000000.000000} | {152, -1000000.000000} | {153, -1000000.000000} | {154, -1000000.000000} | {155, -1000000.000000} | {156, -1000000.000000} | {157, -1000000.000000} | {158, -1000000.000000} | {159, -1000000.000000} | {160, -1000000.000000} | {161, -3.003155} | {162, -3.303462} | {163, -3.508056} | {164, -1000000.000000} | {165, -1000000.000000} | {166, -1000000.000000} | {167, -1000000.000000} | {168, -1.630149} | {169, -1.714808} | {170, -2.041605} | {171, -1000000.000000} | {172, -1000000.000000} | {173, -1000000.000000} | {174, -1000000.000000} | {175, -1000000.000000} | {176, -1000000.000000} | {177, -1000000.000000} | {178, -1000000.000000} | {179, -1000000.000000} | {180, -1000000.000000} | {181, -1000000.000000} | {182, -1000000.000000} | {183, -1000000.000000} | {184, -1000000.000000} | {185, -1000000.000000} | {186, -1000000.000000} | {187, -1000000.000000} | {188, -1000000.000000} | {189, -1000000.000000} | {190, -1000000.000000} | {191, -1000000.000000} | {192, -1000000.000000} | {193, -2.535067} | {194, -1.990845} | {195, -3.007153} | {196, -1000000.000000} | {197, -1000000.000000} | {198, -1000000.000000} | {199, -1000000.000000} | {200, -0.677232} | {201, -1.353178} | {202, -1.159458} | {203, -1000000.000000} | {204, -1000000.000000} | {205, -1000000.000000} | {206, -1000000.000000} | {207, -1000000.000000} | {208, -1000000.000000} | {209, -1000000.000000} | {210, -1000000.000000} | {211, -1000000.000000} | {212, -1000000.000000} | {213, -1000000.000000} | {214, -1000000.000000} | {215, -1000000.000000} | {216, -1000000.000000} | {217, -1000000.000000} | {218, -1000000.000000} | {219, -1000000.000000} | {220, -1000000.000000} | {221, -1000000.000000} | {222, -1000000.000000} | {223, -1000000.000000} | {224, -2.031903} | {225, -2.075087} | {226, -2.474045} | {227, -1000000.000000} | {228, -1000000.000000} | {229, -1000000.000000} | {230, -1000000.000000} | {231, -1000000.000000} | {232, -0.758669} | {233, -1000000.000000} | {234, -1000000.000000} | {235, -1000000.000000} | {236, -1000000.000000} | {237, -1000000.000000} | {238, -1000000.000000} | {239, -1000000.000000} | {240, -1000000.000000} | {241, -1000000.000000} | {242, -1000000.000000} | {243, -1000000.000000} | {244, -1000000.000000} | {245, -1000000.000000} | {246, -1000000.000000} | {247, -1000000.000000} | {248, -1000000.000000} | {249, -1000000.000000} | {250, -1000000.000000} | {251, -1000000.000000} | {252, -1000000.000000} | {253, -1000000.000000} | {254, -1000000.000000} | {255, -1000000.000000} | {256, -1000000.000000} | {257, -1000000.000000} | {258, -1000000.000000} | {259, -3.093251} | {260, -1000000.000000} | {261, -2.887134} | {262, -2.903385} | {263, -3.322022} | {264, -1000000.000000} | {265, -0.303869} | {266, -1.702323} | {267, -2.025358} | {268, -1.361325} | {269, -1.600360} | {270, -1.745189} | {271, -1000000.000000} | {272, -1000000.000000} | {273, -4.857993} | {274, -4.015595} | {275, -5.165324} | {276, -1000000.000000} | {277, -1000000.000000} | {278, -1000000.000000} | {279, -1000000.000000} | {280, -3.303462} | {281, -3.508056} | {282, -3.583818} | {283, -1000000.000000} | {284, -1000000.000000} | {285, -1000000.000000} | {286, -1000000.000000} | {287, -1000000.000000} | {288, -1000000.000000} | {289, 0.389020} | {290, -2.414473} | {291, -2.405372} | {292, -2.948783} | {293, -2.073892} | {294, -3.015124} | {295, -1000000.000000} | {296, 0.353366} | {297, 0.230882} | {298, -1.333946} | {299, -1000000.000000} | {300, -0.866422} | {301, -1000000.000000} | {302, -1000000.000000} | {303, -1000000.000000} | {304, -4.167373} | {305, -4.001785} | {306, -4.098883} | {307, -1000000.000000} | {308, -1000000.000000} | {309, -1000000.000000} | {310, -1000000.000000} | {311, -1000000.000000} | {312, -2.762390} | {313, -1000000.000000} | {314, -1000000.000000} | {315, -1000000.000000} | {316, -1000000.000000} | {317, -1000000.000000} | {318, -1000000.000000} | {319, -1000000.000000} | {320, -1000000.000000} | {321, -0.330123} | {322, -1.335804} | {323, -2.358495} | {324, -1.804900} | {325, -1.983779} | {326, -1.832487} | {327, -1000000.000000} | {328, 0.485556} | {329, 0.149364} | {330, -1.013742} | {331, -1000000.000000} | {332, -0.569233} | {333, -1000000.000000} | {334, -1000000.000000} | {335, -1000000.000000} | {336, -3.009879} | {337, -3.902623} | {338, -2.925829} | {339, -1000000.000000} | {340, -1000000.000000} | {341, -1000000.000000} | {342, -1000000.000000} | {343, -1000000.000000} | {344, -2.474045} | {345, -1000000.000000} | {346, -1000000.000000} | {347, -1000000.000000} | {348, -1000000.000000} | {349, -1000000.000000} | {350, -1000000.000000} | {351, -1000000.000000} | {352, 0.315976} | {353, 0.149364} | {354, -1.269110} | {355, -1000000.000000} | {356, -1.602759} | {357, -1000000.000000} | {358, -1000000.000000} | {359, -1000000.000000} | {360, 0.800685} | {361, -1000000.000000} | {362, -1000000.000000} | {363, -1000000.000000} | {364, -1000000.000000} | {365, -1000000.000000} | {366, -1000000.000000} | {367, -1000000.000000} | {368, -2.761015} | {369, -1000000.000000} | {370, -1000000.000000} | {371, -1000000.000000} | {372, -1000000.000000} | {373, -1000000.000000} | {374, -1000000.000000} | {375, -1000000.000000} | {376, -1000000.000000} | {377, -1000000.000000} | {378, -1000000.000000} | {379, -1000000.000000} | {380, -1000000.000000} | {381, -1000000.000000} | {382, -1000000.000000} | {383, -1000000.000000} | {384, -1000000.000000} | {385, -2.651756} | {386, -2.732097} | {387, -3.157771} | {388, -1000000.000000} | {389, -1000000.000000} | {390, -1000000.000000} | {391, -1000000.000000} | {392, -1.143212} | {393, -1.398950} | {394, -1.584741} | {395, -1000000.000000} | {396, -1000000.000000} | {397, -1000000.000000} | {398, -1000000.000000} | {399, -1000000.000000} | {400, -1000000.000000} | {401, -1000000.000000} | {402, -1000000.000000} | {403, -1000000.000000} | {404, -1000000.000000} | {405, -1000000.000000} | {406, -1000000.000000} | {407, -1000000.000000} | {408, -1000000.000000} | {409, -1000000.000000} | {410, -1000000.000000} | {411, -1000000.000000} | {412, -1000000.000000} | {413, -1000000.000000} | {414, -1000000.000000} | {415, -1000000.000000} | {416, -1.964723} | {417, -1.860388} | {418, -2.480421} | {419, -1000000.000000} | {420, -1000000.000000} | {421, -1000000.000000} | {422, -1000000.000000} | {423, -1000000.000000} | {424, -0.671576} | {425, -1000000.000000} | {426, -1000000.000000} | {427, -1000000.000000} | {428, -1000000.000000} | {429, -1000000.000000} | {430, -1000000.000000} | {431, -1000000.000000} | {432, -1000000.000000} | {433, -1000000.000000} | {434, -1000000.000000} | {435, -1000000.000000} | {436, -1000000.000000} | {437, -1000000.000000} | {438, -1000000.000000} | {439, -1000000.000000} | {440, -1000000.000000} | {441, -1000000.000000} | {442, -1000000.000000} | {443, -1000000.000000} | {444, -1000000.000000} | {445, -1000000.000000} | {446, -1000000.000000} | {447, -1000000.000000} | {448, -1.579064} | {449, -1.775739} | {450, -2.044064} | {451, -1000000.000000} | {452, -1000000.000000} | {453, -1000000.000000} | {454, -1000000.000000} | {455, -1000000.000000} | {456, -0.369787} | {457, -1000000.000000} | {458, -1000000.000000} | {459, -1000000.000000} | {460, -1000000.000000} | {461, -1000000.000000} | {462, -1000000.000000} | {463, -1000000.000000} | {464, -1000000.000000} | {465, -1000000.000000} | {466, -1000000.000000} | {467, -1000000.000000} | {468, -1000000.000000} | {469, -1000000.000000} | {470, -1000000.000000} | {471, -1000000.000000} | {472, -1000000.000000} | {473, -1000000.000000} | {474, -1000000.000000} | {475, -1000000.000000} | {476, -1000000.000000} | {477, -1000000.000000} | {478, -1000000.000000} | {479, -1000000.000000} | {480, -1.025770} | {481, -1000000.000000} | {482, -1000000.000000} | {483, -1000000.000000} | {484, -1000000.000000} | {485, -1000000.000000} | {486, -1000000.000000} | {487, -1000000.000000} | {488, -1000000.000000} | {489, -1000000.000000} | {490, -1000000.000000} | {491, -1000000.000000} | {492, -1000000.000000} | {493, -1000000.000000} | {494, -1000000.000000} | {495, -1000000.000000} | {496, -1000000.000000} | {497, -1000000.000000} | {498, -1000000.000000} | {499, -1000000.000000} | {500, -1000000.000000} | {501, -1000000.000000} | {502, -1000000.000000} | {503, -1000000.000000} | {504, -1000000.000000} | {505, -1000000.000000} | {506, -1000000.000000} | {507, -1000000.000000} | {508, -1000000.000000} | {509, -1000000.000000} | {510, -1000000.000000} | {511, -1000000.000000} | {512, -1000000.000000} | {513, -1000000.000000} | {514, -1000000.000000} | {515, -3.233277} | {516, -1000000.000000} | {517, -2.643212} | {518, -0.678869} | {519, -2.975814} | {520, -1000000.000000} | {521, -1.294641} | {522, -0.821058} | {523, -2.174964} | {524, -0.382703} | {525, -1.525930} | {526, -0.831559} | {527, -1000000.000000} | {528, -1000000.000000} | {529, -2.280432} | {530, -1.896634} | {531, -4.790018} | {532, -1000000.000000} | {533, -1000000.000000} | {534, -1000000.000000} | {535, -1000000.000000} | {536, -2.320160} | {537, -3.386554} | {538, -2.710193} | {539, -1000000.000000} | {540, -1000000.000000} | {541, -1000000.000000} | {542, -1000000.000000} | {543, -1000000.000000} | {544, -1000000.000000} | {545, -2.110167} | {546, -2.556139} | {547, -3.129372} | {548, -2.665000} | {549, -2.470595} | {550, -2.553485} | {551, -1000000.000000} | {552, -0.931243} | {553, -1.079971} | {554, -1.739110} | {555, -1000000.000000} | {556, -1.012371} | {557, -1000000.000000} | {558, -1000000.000000} | {559, -1000000.000000} | {560, -3.779226} | {561, -4.317479} | {562, -3.589688} | {563, -1000000.000000} | {564, -1000000.000000} | {565, -1000000.000000} | {566, -1000000.000000} | {567, -1000000.000000} | {568, -2.845103} | {569, -1000000.000000} | {570, -1000000.000000} | {571, -1000000.000000} | {572, -1000000.000000} | {573, -1000000.000000} | {574, -1000000.000000} | {575, -1000000.000000} | {576, -1000000.000000} | {577, -1.679805} | {578, -0.420603} | {579, -2.621525} | {580, -0.677232} | {581, -1.994370} | {582, -0.717649} | {583, -1000000.000000} | {584, 0.225245} | {585, -0.663636} | {586, -0.722402} | {587, -1000000.000000} | {588, -0.180278} | {589, -1000000.000000} | {590, -1000000.000000} | {591, -1000000.000000} | {592, -1.849428} | {593, -3.858779} | {594, -1.826183} | {595, -1000000.000000} | {596, -1000000.000000} | {597, -1000000.000000} | {598, -1000000.000000} | {599, -1000000.000000} | {600, -2.072897} | {601, -1000000.000000} | {602, -1000000.000000} | {603, -1000000.000000} | {604, -1000000.000000} | {605, -1000000.000000} | {606, -1000000.000000} | {607, -1000000.000000} | {608, -0.886340} | {609, -1.383579} | {610, -1.390583} | {611, -1000000.000000} | {612, -1.443322} | {613, -1000000.000000} | {614, -1000000.000000} | {615, -1000000.000000} | {616, -0.180278} | {617, -1000000.000000} | {618, -1000000.000000} | {619, -1000000.000000} | {620, -1000000.000000} | {621, -1000000.000000} | {622, -1000000.000000} | {623, -1000000.000000} | {624, -2.533066} | {625, -1000000.000000} | {626, -1000000.000000} | {627, -1000000.000000} | {628, -1000000.000000} | {629, -1000000.000000} | {630, -1000000.000000} | {631, -1000000.000000} | {632, -1000000.000000} | {633, -1000000.000000} | {634, -1000000.000000} | {635, -1000000.000000} | {636, -1000000.000000} | {637, -1000000.000000} | {638, -1000000.000000} | {639, -1000000.000000} | {640, -1000000.000000} | {641, -2.458063} | {642, -0.821058} | {643, -2.830498} | {644, -1000000.000000} | {645, -1000000.000000} | {646, -1000000.000000} | {647, -1000000.000000} | {648, -0.169641} | {649, -1.353178} | {650, -0.651584} | {651, -1000000.000000} | {652, -1000000.000000} | {653, -1000000.000000} | {654, -1000000.000000} | {655, -1000000.000000} | {656, -1000000.000000} | {657, -1000000.000000} | {658, -1000000.000000} | {659, -1000000.000000} | {660, -1000000.000000} | {661, -1000000.000000} | {662, -1000000.000000} | {663, -1000000.000000} | {664, -1000000.000000} | {665, -1000000.000000} | {666, -1000000.000000} | {667, -1000000.000000} | {668, -1000000.000000} | {669, -1000000.000000} | {670, -1000000.000000} | {671, -1000000.000000} | {672, -2.116310} | {673, -2.303781} | {674, -2.421565} | {675, -1000000.000000} | {676, -1000000.000000} | {677, -1000000.000000} | {678, -1000000.000000} | {679, -1000000.000000} | {680, -0.854291} | {681, -1000000.000000} | {682, -1000000.000000} | {683, -1000000.000000} | {684, -1000000.000000} | {685, -1000000.000000} | {686, -1000000.000000} | {687, -1000000.000000} | {688, -1000000.000000} | {689, -1000000.000000} | {690, -1000000.000000} | {691, -1000000.000000} | {692, -1000000.000000} | {693, -1000000.000000} | {694, -1000000.000000} | {695, -1000000.000000} | {696, -1000000.000000} | {697, -1000000.000000} | {698, -1000000.000000} | {699, -1000000.000000} | {700, -1000000.000000} | {701, -1000000.000000} | {702, -1000000.000000} | {703, -1000000.000000} | {704, -0.848167} | {705, -1.819141} | {706, -1.299200} | {707, -1000000.000000} | {708, -1000000.000000} | {709, -1000000.000000} | {710, -1000000.000000} | {711, -1000000.000000} | {712, 0.010441} | {713, -1000000.000000} | {714, -1000000.000000} | {715, -1000000.000000} | {716, -1000000.000000} | {717, -1000000.000000} | {718, -1000000.000000} | {719, -1000000.000000} | {720, -1000000.000000} | {721, -1000000.000000} | {722, -1000000.000000} | {723, -1000000.000000} | {724, -1000000.000000} | {725, -1000000.000000} | {726, -1000000.000000} | {727, -1000000.000000} | {728, -1000000.000000} | {729, -1000000.000000} | {730, -1000000.000000} | {731, -1000000.000000} | {732, -1000000.000000} | {733, -1000000.000000} | {734, -1000000.000000} | {735, -1000000.000000} | {736, -1.281112} | {737, -1000000.000000} | {738, -1000000.000000} | {739, -1000000.000000} | {740, -1000000.000000} | {741, -1000000.000000} | {742, -1000000.000000} | {743, -1000000.000000} | {744, -1000000.000000} | {745, -1000000.000000} | {746, -1000000.000000} | {747, -1000000.000000} | {748, -1000000.000000} | {749, -1000000.000000} | {750, -1000000.000000} | {751, -1000000.000000} | {752, -1000000.000000} | {753, -1000000.000000} | {754, -1000000.000000} | {755, -1000000.000000} | {756, -1000000.000000} | {757, -1000000.000000} | {758, -1000000.000000} | {759, -1000000.000000} | {760, -1000000.000000} | {761, -1000000.000000} | {762, -1000000.000000} | {763, -1000000.000000} | {764, -1000000.000000} | {765, -1000000.000000} | {766, -1000000.000000} | {767, -1000000.000000} | {768, -1000000.000000} | {769, -1.733277} | {770, -1.593251} | {771, -2.761340} | {772, -1.736325} | {773, -2.128770} | {774, -1.673991} | {775, -1000000.000000} | {776, -0.382703} | {777, -0.717649} | {778, -1.242587} | {779, -1000000.000000} | {780, -0.569233} | {781, -1000000.000000} | {782, -1000000.000000} | {783, -1000000.000000} | {784, -2.866310} | {785, -3.985815} | {786, -2.729291} | {787, -1000000.000000} | {788, -1000000.000000} | {789, -1000000.000000} | {790, -1000000.000000} | {791, -1000000.000000} | {792, -2.421565} | {793, -1000000.000000} | {794, -1000000.000000} | {795, -1000000.000000} | {796, -1000000.000000} | {797, -1000000.000000} | {798, -1000000.000000} | {799, -1000000.000000} | {800, -1.057102} | {801, -1.070111} | {802, -1.722843} | {803, -1000000.000000} | {804, -1.815864} | {805, -1000000.000000} | {806, -1000000.000000} | {807, -1000000.000000} | {808, -0.035475} | {809, -1000000.000000} | {810, -1000000.000000} | {811, -1000000.000000} | {812, -1000000.000000} | {813, -1000000.000000} | {814, -1000000.000000} | {815, -1000000.000000} | {816, -2.912341} | {817, -1000000.000000} | {818, -1000000.000000} | {819, -1000000.000000} | {820, -1000000.000000} | {821, -1000000.000000} | {822, -1000000.000000} | {823, -1000000.000000} | {824, -1000000.000000} | {825, -1000000.000000} | {826, -1000000.000000} | {827, -1000000.000000} | {828, -1000000.000000} | {829, -1000000.000000} | {830, -1000000.000000} | {831, -1000000.000000} | {832, 0.001544} | {833, -1.036452} | {834, -0.548840} | {835, -1000000.000000} | {836, -0.650739} | {837, -1000000.000000} | {838, -1000000.000000} | {839, -1000000.000000} | {840, 0.286465} | {841, -1000000.000000} | {842, -1000000.000000} | {843, -1000000.000000} | {844, -1000000.000000} | {845, -1000000.000000} | {846, -1000000.000000} | {847, -1000000.000000} | {848, -1.758073} | {849, -1000000.000000} | {850, -1000000.000000} | {851, -1000000.000000} | {852, -1000000.000000} | {853, -1000000.000000} | {854, -1000000.000000} | {855, -1000000.000000} | {856, -1000000.000000} | {857, -1000000.000000} | {858, -1000000.000000} | {859, -1000000.000000} | {860, -1000000.000000} | {861, -1000000.000000} | {862, -1000000.000000} | {863, -1000000.000000} | {864, 0.042759} | {865, -1000000.000000} | {866, -1000000.000000} | {867, -1000000.000000} | {868, -1000000.000000} | {869, -1000000.000000} | {870, -1000000.000000} | {871, -1000000.000000} | {872, -1000000.000000} | {873, -1000000.000000} | {874, -1000000.000000} | {875, -1000000.000000} | {876, -1000000.000000} | {877, -1000000.000000} | {878, -1000000.000000} | {879, -1000000.000000} | {880, -1000000.000000} | {881, -1000000.000000} | {882, -1000000.000000} | {883, -1000000.000000} | {884, -1000000.000000} | {885, -1000000.000000} | {886, -1000000.000000} | {887, -1000000.000000} | {888, -1000000.000000} | {889, -1000000.000000} | {890, -1000000.000000} | {891, -1000000.000000} | {892, -1000000.000000} | {893, -1000000.000000} | {894, -1000000.000000} | {895, -1000000.000000} | {896, -1.554853} | {897, -1.956764} | {898, -1.908021} | {899, -1000000.000000} | {900, -1000000.000000} | {901, -1000000.000000} | {902, -1000000.000000} | {903, -1000000.000000} | {904, -0.400930} | {905, -1000000.000000} | {906, -1000000.000000} | {907, -1000000.000000} | {908, -1000000.000000} | {909, -1000000.000000} | {910, -1000000.000000} | {911, -1000000.000000} | {912, -1000000.000000} | {913, -1000000.000000} | {914, -1000000.000000} | {915, -1000000.000000} | {916, -1000000.000000} | {917, -1000000.000000} | {918, -1000000.000000} | {919, -1000000.000000} | {920, -1000000.000000} | {921, -1000000.000000} | {922, -1000000.000000} | {923, -1000000.000000} | {924, -1000000.000000} | {925, -1000000.000000} | {926, -1000000.000000} | {927, -1000000.000000} | {928, -1.274118} | {929, -1000000.000000} | {930, -1000000.000000} | {931, -1000000.000000} | {932, -1000000.000000} | {933, -1000000.000000} | {934, -1000000.000000} | {935, -1000000.000000} | {936, -1000000.000000} | {937, -1000000.000000} | {938, -1000000.000000} | {939, -1000000.000000} | {940, -1000000.000000} | {941, -1000000.000000} | {942, -1000000.000000} | {943, -1000000.000000} | {944, -1000000.000000} | {945, -1000000.000000} | {946, -1000000.000000} | {947, -1000000.000000} | {948, -1000000.000000} | {949, -1000000.000000} | {950, -1000000.000000} | {951, -1000000.000000} | {952, -1000000.000000} | {953, -1000000.000000} | {954, -1000000.000000} | {955, -1000000.000000} | {956, -1000000.000000} | {957, -1000000.000000} | {958, -1000000.000000} | {959, -1000000.000000} | {960, -0.854306} | {961, -1000000.000000} | {962, -1000000.000000} | {963, -1000000.000000} | {964, -1000000.000000} | {965, -1000000.000000} | {966, -1000000.000000} | {967, -1000000.000000} | {968, -1000000.000000} | {969, -1000000.000000} | {970, -1000000.000000} | {971, -1000000.000000} | {972, -1000000.000000} | {973, -1000000.000000} | {974, -1000000.000000} | {975, -1000000.000000} | {976, -1000000.000000} | {977, -1000000.000000} | {978, -1000000.000000} | {979, -1000000.000000} | {980, -1000000.000000} | {981, -1000000.000000} | {982, -1000000.000000} | {983, -1000000.000000} | {984, -1000000.000000} | {985, -1000000.000000} | {986, -1000000.000000} | {987, -1000000.000000} | {988, -1000000.000000} | {989, -1000000.000000} | {990, -1000000.000000} | {991, -1000000.000000} | {992, -1000000.000000} | {993, -1000000.000000} | {994, -1000000.000000} | {995, -1000000.000000} | {996, -1000000.000000} | {997, -1000000.000000} | {998, -1000000.000000} | {999, -1000000.000000} | {1000, -1000000.000000} | {1001, -1000000.000000} | {1002, -1000000.000000} | {1003, -1000000.000000} | {1004, -1000000.000000} | {1005, -1000000.000000} | {1006, -1000000.000000} | {1007, -1000000.000000} | {1008, -1000000.000000} | {1009, -1000000.000000} | {1010, -1000000.000000} | {1011, -1000000.000000} | {1012, -1000000.000000} | {1013, -1000000.000000} | {1014, -1000000.000000} | {1015, -1000000.000000} | {1016, -1000000.000000} | {1017, -1000000.000000} | {1018, -1000000.000000} | {1019, -1000000.000000} | {1020, -1000000.000000} | {1021, -1000000.000000} | {1022, -1000000.000000} | {1023, -1000000.000000}";
        String jarPath = "C:\\Users\\akka02\\Desktop\\Thesis (github)\\Software\\EclipseWorkspace\\Baseline Solution\\BOSS_for_baseline\\BOSS algorithm\\BOSS_Central.jar";
        int timeout = 5;
        
        String inputFilePath = System.getProperty("user.dir") + "\\majanService\\JarInput.txt";
        File inputFile = new File(inputFilePath);
        inputFile.getParentFile().mkdirs();
        String outputFilePath = System.getProperty("user.dir") + "\\majanService\\JarOutput.txt";
        File outputFile = new File(outputFilePath);
        outputFile.getParentFile().mkdirs();
        
        try{
            writeToFile(inputFilePath, body);
            String jarResult = runJar(jarPath, inputFilePath, outputFilePath, timeout);
            String output = readFromFile(outputFilePath).trim();
            System.out.println("jarResult:---" + jarResult);
            System.out.println("output:---" + output);
        }catch(Exception ex){
            ex.printStackTrace();
        }
        
        outputFile.delete();
        inputFile.delete();
    }
    private static void writeToFile(String filePath, String input) throws IOException{
        FileWriter fileWriter = new FileWriter(filePath);
        PrintWriter printWriter=new PrintWriter(fileWriter);
        BufferedReader reader = new BufferedReader(new StringReader(input));
        Iterator<String> linesIter = reader.lines().iterator();
        while(linesIter.hasNext()) {
            printWriter.append(linesIter.next()).println();
        }
        printWriter.close();
    }
    
    private static String readFromFile(String filePath) throws FileNotFoundException, IOException {
        String result = "";
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            Iterator<String> linesIter = reader.lines().iterator();
            while(linesIter.hasNext()) {
                result += linesIter.next() + System.lineSeparator();
            }
        }
        return result;
    }
    
    private static String runJar(String jarPath, String inputPath, String outputPath, int timeout) throws InterruptedException, IOException{
        String command = "java -jar \"" + jarPath + "\" \"" + inputPath + "\" \"" + outputPath + "\"";
        String result = "";
        Process pr = Runtime.getRuntime().exec(command);
        if(pr.waitFor(timeout, TimeUnit.SECONDS)){
            InputStream in = pr.getInputStream();
            StringBuilder output = new StringBuilder();
            try (Reader reader = new BufferedReader(new InputStreamReader(in, Charset.forName(StandardCharsets.UTF_8.name())))) {
                int c = 0;
                while ((c = reader.read()) != -1) {
                    output.append((char) c);
                }
            }
            result = output.toString();
            
            InputStream errorStream = pr.getErrorStream();
            StringBuilder error = new StringBuilder();
            try (Reader reader = new BufferedReader(new InputStreamReader(errorStream, Charset.forName(StandardCharsets.UTF_8.name())))) {
                int c = 0;
                while ((c = reader.read()) != -1) {
                    error.append((char) c);
                }
            }
            result += error.toString();
        }else{
            result = "Algorithm didn't finish execution before timeout!";
        }
        return result;
    }
    public static void runJarFile() throws InterruptedException{
        String command = "java -jar C:\\Users\\akka02\\Desktop\\BOSS_Central.jar";
        String cmd = "java -jar \"C:\\Users\\akka02\\Desktop\\Thesis (github)\\Software\\EclipseWorkspace\\Baseline Solution\\BOSS_for_baseline\\BOSS algorithm\\BOSS_Central.jar\"";
        try {
//java -jar "C:\\Users\akka02\Desktop\Thesis (github)\Software\EclipseWorkspace\Baseline Solution\BOSS_for_baseline\BOSS algorithm\BOSS_Central.jar"
            Process pr =  Runtime.getRuntime().exec(cmd);
            System.out.println("33-"+pr.waitFor(5, TimeUnit.SECONDS));
            
            System.out.println("11-"+pr.isAlive());
            
            InputStream in = pr.getInputStream();
            InputStream errs = pr.getErrorStream();
            OutputStream out = pr.getOutputStream();
            
            StringBuilder error = new StringBuilder();
            try (Reader reader = new BufferedReader(new InputStreamReader(errs, Charset.forName(StandardCharsets.UTF_8.name())))) {
                int c = 0;
                while ((c = reader.read()) != -1) {
                    error.append((char) c);
                }
            }
            
            System.out.println("error:"+error.toString());
            StringBuilder output = new StringBuilder();
            try (Reader reader = new BufferedReader(new InputStreamReader(in, Charset.forName(StandardCharsets.UTF_8.name())))) {
                int c = 0;
                while ((c = reader.read()) != -1) {
                    output.append((char) c);
                }
            }
            
            System.out.println("output:"+output.toString());
            System.out.println("22:"+pr.isAlive());
            /*
            Scanner scan = new Scanner(System.in);
            BufferedReader reader = new BufferedReader (new InputStreamReader(in));
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out));
            String input = scan.nextLine();
            input += "\n";
            writer.write(input);
            writer.flush();
            input = scan.nextLine();
            input += "\n";
            writer.write(input);
            writer.flush();
            String line;
            while ((line = reader.readLine ()) != null) {
                System.out.println ("Stdout: " + line);
            }
            
            input = scan.nextLine();
            input += "\n";
            writer.write(input);
            writer.close();
            
            while ((line = reader.readLine ()) != null) {
                System.out.println ("Stdout: " + line);
            }*/
        } catch (IOException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static String execCmd(String cmd) {
        String result = null;
        try (InputStream inputStream = Runtime.getRuntime().exec(cmd).getInputStream();
                Scanner s = new Scanner(inputStream).useDelimiter("\\A")) {
            result = s.hasNext() ? s.next() : null;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }
        public static Model addNamespacesFromSparql(Model model, String sparqlQuery){
            int index = 0;
            if(sparqlQuery.contains("CONSTRUCT")){
                index = sparqlQuery.indexOf("CONSTRUCT");
            }else if(sparqlQuery.contains("ASK")){
                index = sparqlQuery.indexOf("ASK");
            }else if(sparqlQuery.contains("SELECT")){
                index = sparqlQuery.indexOf("SELECT");
            }else if(sparqlQuery.contains("INSERT")){
                index = sparqlQuery.indexOf("INSERT");
            }
            if(sparqlQuery.contains("DELETE")){
                index = sparqlQuery.indexOf("DELETE");
            }
            
            sparqlQuery = sparqlQuery.substring(0, index);
                System.out.println("0--"+sparqlQuery);

            //Set<Namespace> namespaces = new HashSet<>();
            while(sparqlQuery.contains("PREFIX")){
                int prfIndex = sparqlQuery.indexOf("PREFIX") ;
                int symbolIndex = sparqlQuery.indexOf(">");
                String sub = sparqlQuery.substring(prfIndex+6, symbolIndex);
                String[] spt = sub.split("<");
                String prefix = spt[0].trim().replace(":", "");
                String url = spt[1].trim();
                sparqlQuery = sparqlQuery.substring(0, prfIndex) + sparqlQuery.substring(symbolIndex+1, sparqlQuery.length()).trim();
                model.setNamespace(prefix, url);
                System.out.println("1--"+prfIndex);
                System.out.println("2--"+symbolIndex);
                System.out.println("3--"+sub);
                System.out.println("4--"+spt[0]);
                System.out.println("5--"+spt[1]);
                System.out.println("6--"+sparqlQuery);
            }
              /*int prfIndex = sparqlQuery.indexOf("PREFIX") ;
            int symbolIndex = sparqlQuery.indexOf(">");
            String sub = sparqlQuery.substring(prfIndex+6, symbolIndex);
            String[] spt = sub.split("<");
            String prefix = spt[0].trim().replace(":", "");
            String url = spt[1].trim();
            sparqlQuery = sparqlQuery.substring(0, prfIndex) + sparqlQuery.substring(symbolIndex+1, sparqlQuery.length()).trim();
              */    
            
            
            
            return model;
        }
        
    private static Model readRequest(String request, RDFFormat format) throws IOException {
//        System.out.println("Request:");
//        System.out.println(request);
        InputStream input = new ByteArrayInputStream(request.getBytes());
        RDFFormat f = Rio.getParserFormatForFileName(request).orElse(format);
        System.out.println("--"+f);
        RDFParser rp = Rio.createParser(format);
        rp.parse(input);
        
        Model model = Rio.parse(input, "", format);
        
        for (Statement statement : model) {
            System.out.println(statement);
        }
        return model;
    }
    private static Model createModel(String in) throws IOException{
        InputStream inputStream = new ByteArrayInputStream(in.getBytes());


        Model model = Rio.parse(inputStream, "", RDFFormat.TURTLE);
        return model;
    }
    /*
    public static String trigINP = "@prefix : <http://localhost:8080/WelcomeServiceDescriptions/CatalanReceptionService.owls> .\n" +
            "@prefix process: <http://www.daml.org/services/owl-s/1.1/Process.owl#> .\n" +
            "@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n" +
            "@prefix owl: <http://www.w3.org/2002/07/owl#> .\n" +
            "@prefix service: <http://www.daml.org/services/owl-s/1.1/Service.owl#> .\n" +
            "@prefix profile: <http://www.daml.org/services/owl-s/1.1/Profile.owl#> .\n" +
            "@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n" +
            "@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n" +
            "@prefix welcome: <http://localhost:8080/WelcomeServiceDescriptions/Welcome.owl#> .\n" +
            "@prefix pddlexpr: <http://127.0.0.1:8080/ontology/PDDLExpression.owl#> .\n" +
            "@prefix expr: <http://www.daml.org/services/owl-s/1.1/generic/Expression.owl#> .\n" +
            "@prefix grounding: <http://www.daml.org/services/owl-s/1.1/Grounding.owl#> .\n" +
            "@prefix swrl: <http://www.w3.org/2003/11/swrl#> .\n" +
            "@prefix actor: <http://www.daml.org/services/owl-s/1.2/ActorDefault.owl#> .\n" +
            "@prefix objectList: <http://www.daml.org/services/owl-s/1.2/generic/ObjectList.owl#> .\n" +
            "@prefix swrl-onto: <http://www.daml.org/rules/proposal/swrl.owl> .\n" +
            "@prefix congo_process: <http://www.daml.org/services/owl-s/1.2/Process.owl#> .\n" +
            "@prefix congo_profile: <http://www.daml.org/services/owl-s/1.2/Profile.owl#> .\n" +
            "@prefix congo_grounding: <http://www.daml.org/services/owl-s/1.2/Grounding.owl#> .\n" +
            "@prefix objList: <http://localhost:8080/ontology/ObjectList.owl> .\n" +
            "\n" +
            "<http://localhost:8080/WelcomeServicesOffers/FirstReceptionService> {\n" +
            "\t<http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl> a owl:Ontology ;\n" +
            "\t\trdfs:comment \"Semantic Service Description First Reception Service in Catalonia\" ;\n" +
            "\t\towl:imports <http://localhost:8080/WelcomeServiceDescriptions/Welcome.owl> , <http://localhost:8080/ontology/Process.owl> , <http://localhost:8080/ontology/Profile.owl> , <http://localhost:8080/ontology/Service.owl> , <http://localhost:8080/ontology/PDDLExpression.owl> .\n" +
            "\t\n" +
            "\t<http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#FirstReceptionService> a <http://localhost:8080/ontology/Service.owl#Service> ;\n" +
            "\t\t<http://localhost:8080/ontology/Service.owl#describedBy> <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#FillFormComposite> ;\n" +
            "\t\t<http://localhost:8080/ontology/Service.owl#presents> <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#FirstReceptionServiceProfile> .\n" +
            "\t\n" +
            "\t<http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#FillFormComposite> a <http://localhost:8080/ontology/Process.owl#CompositeProcess> ;\n" +
            "\t\t<http://localhost:8080/ontology/Service.owl#describes> <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#FirstReceptionService> ;\n" +
            "\t\t<http://localhost:8080/ontology/Process.owl#hasPrecondition> <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#FirstReceptionCondition> ;\n" +
            "\t\t<http://localhost:8080/ontology/Process.owl#hasInput> <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainAsylumClaim> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainBirthday> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainBuildingName> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainBuildingType> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainCityOfBirth> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainCountryOfBirth> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainCourseInstitution> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainCourseName> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainCoursesCatalan> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainCoursesLabour> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainCoursesSociety> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainCoursesSpanish> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainDoorNumber> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainDuration> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainEMailNotifications> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainEmail> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainEntrance> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainFirstSurname> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainFloorNumber> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainGender> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainIDCountry> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainIDNumber> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainIDType> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainIlliteracy> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainInterestRegistration> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainKnowledgeCatalan> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainKnowledgeLabour> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainKnowledgeSociety> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainKnowledgeSpanish> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainLandline> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainLearningHandicap> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainMaritalStatus> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainMobilePhone> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainMunicipality> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainName> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainNationality> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainNotificationPreferences> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainPostCode> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainPreviousResidenceCatalonia> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainPreviousResidenceOther> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainPreviousResidenceSpain> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainProvince> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainRegistrationYear> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainSMSNotifications> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainSecondSurname> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainStreetName> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainStreetNumber> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainStreetType> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainYearArrival> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#ObtainYearCompletion> ;\n" +
            "\t\t<http://localhost:8080/ontology/Process.owl#hasOutput> <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformDetailsCompletion> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformDetailsLanguage> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformDetailsTime> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformDetailsValue> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformLabourModule> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformLabourModuleAddress> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformLabourModuleHours> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformLanguageModule> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformLanguageModuleAddress> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformLanguageModuleHours> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformOverview> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformSocietyModule> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformSocietyModuleAddress> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformSocietyModuleHours> , <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#InformTraining> ;\n" +
            "\t\t<http://localhost:8080/ontology/Process.owl#composedOf> _:node1et28i2fvx2 ;\n" +
            "\t\t<http://localhost:8080/ontology/Process.owl#hasResult> <http://localhost:8080/WelcomeServicesOffers/FirstReceptionService.owl#FirstReceptionServiceResult> .\n" +
            "\t}";

    public static void main(String[] args) throws IOException/*, InvalidSPARQLException*/ {
//        parse();
//        createModelFromRDF();
//        testRdfJson();
//        queryParse();
//        String address = "Berlin, Germany";
//        convertLocation2Coordinates(address);
//        geocoder();
//        OpenStreetMapUtils openStreetMapUtils = new OpenStreetMapUtils();
//        Map<String, Double> coordinates = openStreetMapUtils.getCoordinates(address);
//        if (coordinates.entrySet() != null) {
//            for (int i = 0; i < coordinates.entrySet().size(); i++) {
//                System.out.println("coordinates.entrySet().toArray()[i] = " + coordinates.entrySet().toArray()[i]);
//                System.out.println("coordinates.keySet().toArray()[i] = " + coordinates.keySet().toArray()[i]);
//            }
//        }
//        createModelFromZero();
//        convert2CollectionTest();
//        testingRegex();
//        testingBlankNode();
//        testingCreateLiteralWithXSDString();

//        generateModel();
//        castToModel();
//        createModelFromRDF();
//        sendPostRequest();
      /*  try {
            serializeFeedback();
        } catch (MissingAnnotation missingAnnotation) {
            missingAnnotation.printStackTrace();
        }

    }
/*
    private static void serializeFeedback() throws MissingAnnotation {
        com.hp.hpl.jena.rdf.model.Model model = com.hp.hpl.jena.rdf.model.ModelFactory.createDefaultModel();
        EntityManager entityManager = EntityManagerFactory.getEntityManager();
        com.hp.hpl.jena.rdf.model.Resource resource = model.createResource("http://example.com/feedback");
        Feedback feedback = entityManager.read(resource, Feedback.class);
        feedback.setAddress("Waldhausweg 17");
        feedback.setID(15);
        feedback.setName("MyFeedback");
        feedback.setUsername("Akbar");

        System.out.println(model.listStatements().toList());
    }

    private static void testingSPARQLBuilder() {
        SelectQuery selectQuery = Queries.SELECT();
        ConstructQuery constructQuery = Queries.CONSTRUCT();

        Prefix prefix = null;
        Variable product;
        TriplePattern personWroteBook, personAuthoredBook;

//        selectQuery.prefix(prefix).select(product).where(product.isA(prefix.iri("book")));

    }

    private static void testRdfJson() {
        String mimeType = "application/rdf+json";
        Optional<RDFFormat> fileFormatForMIMEType = RDFWriterRegistry
                .getInstance().getFileFormatForMIMEType(mimeType);

        System.out.println("fileFormatForMIMEType.get() = " + fileFormatForMIMEType.get());
        System.out.println("fileFormatForMIMEType.isPresent() = " + fileFormatForMIMEType.isPresent());
        if (!fileFormatForMIMEType.isPresent()) {
            throw new IllegalArgumentException("No format known for Mime type " + mimeType);
        }

//        Optional<RDFFormat> fileFormatMimeType = RDFWriterRegistry
//                .getInstance().getFileFormatForMIMEType("application/rdf+json");

//        System.out.println(fileFormatMimeType.isPresent());
//        System.out.println("fileFormatMimeType.get() = " + fileFormatMimeType.get());
    }

    private static void createModelFromRDF() throws IOException {
        String rdfInput = "@prefix welcome: <http://welcome/services/1.0/> .\n" +
                "@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n" +
                "welcome:TCN_Location a welcome:Location ;\n" +
                "    welcome:latitude \"49.247765\";\n" +
                "    welcome:longitude \"7.023154\";\n" +
                "    welcome:address_name \"Saarbrucken\".\n" +
                "\n" +
                "\n" +
                "welcome:Office1 a welcome:Office;\n" +
                "    welcome:latitude \"53.540307\" ;\n" +
                "    welcome:longitude \"9.986572\";\n" +
                "    welcome:address_name \"Hamburg\".\n" +
                "\n" +
                "welcome:Office2 a welcome:Office; \n" +
                "    welcome:latitude \"48.864715\" ;\n" +
                "    welcome:longitude \"2.197266\";\n" +
                "    welcome:address_name \"Paris\".\n" +
                "\n" +
                "welcome:Office3 a welcome:Office; \n" +
                "    welcome:latitude \"51.124213\" ;\n" +
                "    welcome:longitude \"17.006836\";\n" +
                "    welcome:address_name \"Wroclaw\".\n" +
                "\n" +
                "welcome:Office4 a welcome:Office; \n" +
                "    welcome:latitude \"51.508742\" ;\n" +
                "    welcome:longitude \"-0.219727\";\n" +
                "    welcome:address_name \"London\".\n" +
                "\n" +
                "welcome:Office5 a welcome:Office; \n" +
                "    welcome:latitude \"41.376809\" ;\n" +
                "    welcome:longitude \"2.131348\";\n" +
                "    welcome:address_name \"Barcelona\".\n" +
                "\n" +
                "welcome:Office6 a welcome:Office; \n" +
                "    welcome:latitude \"49.446700\" ;\n" +
                "    welcome:longitude \"7.767334\";\n" +
                "    welcome:address_name \"Kaiserslautern\".\n" +
                "\n" +
                "welcome:Office7 a welcome:Office;\n" +
                "    welcome:latitude \"48.122101\" ;\n" +
                "    welcome:longitude \"11.612549\";\n" +
                "    welcome:address_name \"Munchen\".";
        InputStream inputStream = new ByteArrayInputStream(rdfInput.getBytes());


        Model model = Rio.parse(inputStream, "", RDFFormat.TURTLE);

        printModel(model);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        RDFWriter writer = Rio.createWriter(RDFFormat.JSONLD, outputStream);
//                .set(JSONLDSettings.USE_NATIVE_TYPES, true);

//        Rio.write(model,outputStream,RDFFormat.RDFJSON);
//        JSONLDWriter jsonldWriter= (JSONLDWriter) Rio.createWriter(RDFFormat.JSONLD,outputStream);
        JSONLDWriter jsonldWriter1 = new JSONLDWriter(outputStream);


        try {
            jsonldWriter1.startRDF();
            for (Statement s : model) {
                jsonldWriter1.handleStatement(s);
            }
            jsonldWriter1.endRDF();
        } catch (RDFHandlerException e) {
            e.printStackTrace();
        } finally {
            outputStream.close();
        }


//        Rio.write(model, writer);

        System.out.println("Gelllllllllllllllllllllllllllllllllll");
//        System.out.println(outputStream.toString());
        System.out.println(new String(outputStream.toByteArray()));
        System.out.println("Getttttttttttttttttttttttttttttttt");

//        System.out.println("statements below:");
        Iterator<Statement> statementIterator = model.iterator();
        while (statementIterator.hasNext()) {
            System.out.println(statementIterator.next());

        }


        ValueFactory factory = SimpleValueFactory.getInstance();
        List<Model> officeModels = new ArrayList<>();
        Resource tcnLocationResource = factory.createIRI("http://welcome/services/1.0/TCN_Location");
        Resource officeResource = factory.createIRI("http://welcome/services/1.0/Office");

        Model tcnModel = model.filter(tcnLocationResource, null, null);
        Set<Resource> subjects = model.filter(null, null, officeResource).subjects();
        for (Resource subjectResource : subjects) {
            officeModels.add(model.filter(subjectResource, null, null));
        }


        Model closestModel = calcualteClosest(tcnModel, officeModels);
//
        Statement closestOfficeStatement = factory.createStatement(tcnModel.subjects().iterator().next(),
                factory.createIRI("http://welcome/services/1.0/closest"),
                closestModel.subjects().iterator().next());
        model.add(closestOfficeStatement);

//        System.out.println("Closest Office below:");
//        printModel(closestModel);
//        System.out.println("Full Model below:");
        printModel(model);


    }

    private static void printModel(Model model) {
        System.out.println("Namespaces: ");
        for (Namespace n : model.getNamespaces()) {
            System.out.println(n);
        }
        System.out.println("\n\n");
        Iterator<Statement> statementIterator = model.iterator();
        while (statementIterator.hasNext()) {
            System.out.println(statementIterator.next());
        }


    }

    private static Model calcualteClosest(Model tcnModel, List<Model> officeModels) {
        Model closestModel = null;
        double closestDistance = 999999999;
        double tcnLat = getLatitudeFromModel(tcnModel);
        double tcnLong = getLongitudeFromModel(tcnModel);
        for (Model m : officeModels) {
            double officeLat = getLatitudeFromModel(m);
            double officeLong = getLongitudeFromModel(m);
            double dist = Math.sqrt((officeLat - tcnLat) * (officeLat - tcnLat)
                    + (officeLong - tcnLong) * (officeLong - tcnLong));
            if (dist < closestDistance) {
                closestDistance = dist;
                closestModel = m;
            }
        }

        return closestModel;

    }

    private static Double getLatitudeFromModel(Model model) {
        ValueFactory factory = SimpleValueFactory.getInstance();
        IRI latitudeIRI = factory.createIRI("http://welcome/services/1.0/latitude");
        Set<Value> values = model.filter(null, latitudeIRI, null).objects();
        assert values.size() > 0;
        try {
            return Double.parseDouble(values.iterator().next().stringValue());
        } catch (NumberFormatException | NullPointerException ex) {
            throw ex;
        }
    }

    private static Double getLongitudeFromModel(Model model) {
        ValueFactory factory = SimpleValueFactory.getInstance();
        IRI latitudeIRI = factory.createIRI("http://welcome/services/1.0/longitude");
        Set<Value> values = model.filter(null, latitudeIRI, null).objects();
        assert values.size() > 0;
        try {
            return Double.parseDouble(values.iterator().next().stringValue());
        } catch (NumberFormatException | NullPointerException ex) {
            throw ex;
        }
    }

    public static Model generateModel() {
        String jsonLdExpand = "{\"@id\":\"http://welcome/services/1.0/dip1\",\"@type\":[\"http://welcome/services/1.0/DIP_request_info\"],\"http://welcome/services/1.0/dip_TCNname\":[{\"@value\":\"Karim T\"}],\"http://welcome/services/1.0/dip_age\":[{\"@value\":\"26\"}],\"http://welcome/services/1.0/dip_countryOrigin\":[{\"@value\":\"Syria\"}],\"http://welcome/services/1.0/dip_residence_address_city\":[{\"@value\":\"unknown\"}],\"http://welcome/services/1.0/dip_residence_address_number\":[{\"@value\":\"unknown\"}],\"http://welcome/services/1.0/dip_residence_address_street\":[{\"@value\":\"unknown\"}],\"http://welcome/services/1.0/dip_time_arrival_current_residence\":[{\"@value\":\"unknown\"}]}";
        String rdfInput = "@prefix welcome: <http://welcome/services/1.0/> .\n" +
                "@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n" +
                "welcome:TCN_Location a welcome:Location ;\n" +
                "    welcome:latitude \"49.160155\";\n" +
                "    welcome:longitude \"8.000141\";\n" +
                "    welcome:address_name \"Saarbrucken\".\n" +
                "\n" +
                "\n" +
                "welcome:Office1 a welcome:Office;\n" +
                "    welcome:latitude \"49.073866\" ;\n" +
                "    welcome:longitude \"9.319362\";\n" +
                "    welcome:address_name \"Stutgart\".\n" +
                "\n" +
                "welcome:Office2 a welcome:Office; \n" +
                "    welcome:latitude \"50.127622\" ;\n" +
                "    welcome:longitude \"50.127622\";\n" +
                "    welcome:address_name \"Frankfurt\".\n" +
                "\n" +
                "welcome:Office3 a welcome:Office;\n" +
                "    welcome:latitude \"52.409121\" ;\n" +
                "    welcome:longitude \"13.408944\";\n" +
                "    welcome:address_name \"Berlin\".";

        InputStream inputStream = new ByteArrayInputStream(trigINP.getBytes());


        Model model = null;
        try {
            model = Rio.parse(inputStream, "", RDFFormat.TRIG);
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }


//        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
//        RDFWriter writer = Rio.createWriter(RDFFormat.JSONLD, outputStream);
//        Rio.write(model, writer);

        String rdf4jServer = "http://localhost:8090/rdf4j";
        String repositoryID = "tst";
        Repository repo = new HTTPRepository(rdf4jServer, repositoryID);
        try (RepositoryConnection connection = repo.getConnection()) {
            connection.begin(IsolationLevels.SERIALIZABLE);
            model.forEach((stmt) -> {
                connection.add(stmt.getSubject(), stmt.getPredicate(), stmt.getObject(), stmt.getContext());
            });
            connection.commit();
        }
        return model;
    }

    private static void accessRemoteRepo() {

        String graphDBServer = "http://localhost:7200";
        String repositoryID = "agents";
//        String sparqlQuery = "SELECT * WHERE {?s ?p ?o .}";
        Repository repo = new HTTPRepository(graphDBServer, repositoryID);
//        RepositoryManager repositoryManager = new RemoteRepositoryManager(graphDBServer);
//        repositoryManager.initialize();

//        Repository repository = repositoryManager.getRepository(repositoryID);

        try (RepositoryConnection connection = repo.getConnection()) {
//            Query query = connection.prepareQuery(sparqlQuery);
            RepositoryResult<Statement> statements = connection.getStatements(null, null, null);
            while (statements.hasNext()) {
                System.out.println("-- " + statements.next());
            }
        }


    }

    private static void sendPostRequest() throws IOException {
        String query = "@prefix : <http://localhost:8090/rdf4j/repositories/welcome_ontology#> .\n" +
                "@prefix owl: <http://www.w3.org/2002/07/owl#> .\n" +
                "@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n" +
                "@prefix xml: <http://www.w3.org/XML/1998/namespace> .\n" +
                "@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n" +
                "@prefix ajan: <http://www.ajan.de/ajan-ns#> .\n" +
                "@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n" +
                "@prefix actor: <http://www.daml.org/services/owl-s/1.1/ActorDefault.owl#> .\n" +
                "@prefix http-core: <http://www.w3.org/2006/http#>.\n" +
                "\n" +
                ":initialization rdf:type ajan:AgentInitialisation .\n" +
                ":initialization ajan:agentName \"TestAgent2\"^^xsd:string .\n" +
                "\n" +
                ":initialization ajan:agentTemplate <http://localhost:8090/rdf4j/repositories/agents#WelcomeAgent> .\n" +
                "\n" +
                ":initialization ajan:agentInitKnowledge <http://localhost:8080/WelcomeServiceDescriptions/welcome_ontology#> .\n" +
                "<http://localhost:8080/WelcomeServiceDescriptions/welcome_ontology#> rdf:type owl:Ontology .\n" +
                "\n" +
                ":initialization ajan:agentInitKnowledge :ActiveAgents.\n" +
                ":initialization ajan:agentInitKnowledge :TRForm.\n" +
                "\n" +
                ":ActiveAgents http-core:requestURI \"http://localhost:8092/dispatcher/activeAgents\".\n" +
                ":TRForm http-core:requestURI \"http://localhost:8092/dispatcher/translationForm\".\n" +
                "\n";
        URL url = new URL("http://localhost:8080/welcome/integration/coordination/ajan/agents/");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-Type", "text/turtle; utf-8");
        con.setDoOutput(true);
        try (OutputStream os = con.getOutputStream()) {
            byte[] input = query.getBytes(StandardCharsets.UTF_8);
            os.write(input, 0, input.length);
        }

        try (BufferedReader br = new BufferedReader(
                new InputStreamReader(con.getInputStream(), StandardCharsets.UTF_8))) {
            StringBuilder response = new StringBuilder();
            String responseLine = null;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
            System.out.println(response.toString());
        }
    }

    private static void castToModel() {
        Object ex = "@prefix : <http://www.semanticweb.org/welcome#> .\n" +
                "@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n" +
                "@prefix owl: <http://www.w3.org/2002/07/owl#> .\n" +
                "@prefix welcome: <https://raw.githubusercontent.com/gtzionis/WelcomeOntology/main/welcome.ttl#> .\n" +
                "\n" +
                "welcome:myWelcomeAgent9 rdf:type welcome:Handshaking .";

        Model model = (Model) ex;

    }
//    private static void createModel() throws IOException {
//        String jsonLdExpand = "{\"@id\":\"http://welcome/services/1.0/dip1\",\"@type\":[\"http://welcome/services/1.0/DIP_request_info\"],\"http://welcome/services/1.0/dip_TCNname\":[{\"@value\":\"Karim T\"}],\"http://welcome/services/1.0/dip_age\":[{\"@value\":\"26\"}],\"http://welcome/services/1.0/dip_countryOrigin\":[{\"@value\":\"Syria\"}],\"http://welcome/services/1.0/dip_residence_address_city\":[{\"@value\":\"unknown\"}],\"http://welcome/services/1.0/dip_residence_address_number\":[{\"@value\":\"unknown\"}],\"http://welcome/services/1.0/dip_residence_address_street\":[{\"@value\":\"unknown\"}],\"http://welcome/services/1.0/dip_time_arrival_current_residence\":[{\"@value\":\"unknown\"}]}";
//        String rdfInput = "@prefix welcome: <http://welcome/services/1.0/> .\n" +
//                "@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n" +
//                "welcome:TCN_Location a welcome:Location ;\n" +
//                "    welcome:latitude \"49.160155\";\n" +
//                "    welcome:longitude \"8.000141\";\n" +
//                "    welcome:address_name \"Saarbrucken\".\n" +
//                "\n" +
//                "\n" +
//                "welcome:Office1 a welcome:Office;\n" +
//                "    welcome:latitude \"49.073866\" ;\n" +
//                "    welcome:longitude \"9.319362\";\n" +
//                "    welcome:address_name \"Stutgart\".\n" +
//                "\n" +
//                "welcome:Office2 a welcome:Office; \n" +
//                "    welcome:latitude \"50.127622\" ;\n" +
//                "    welcome:longitude \"50.127622\";\n" +
//                "    welcome:address_name \"Frankfurt\".\n" +
//                "\n" +
//                "welcome:Office3 a welcome:Office;\n" +
//                "    welcome:latitude \"52.409121\" ;\n" +
//                "    welcome:longitude \"13.408944\";\n" +
//                "    welcome:address_name \"Berlin\".";
//        InputStream inputStream = new ByteArrayInputStream(rdfInput.getBytes());
//
//
//        Model model = Rio.parse(inputStream, "", RDFFormat.TURTLE);
//
//
//        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
//        RDFWriter writer = Rio.createWriter(RDFFormat.JSONLD, outputStream);
//        Rio.write(model, writer);
//
//        InputStream inputStream1 = new ByteArrayInputStream(outputStream.toByteArray());
//
//        Object jsonObject = JsonUtils.fromInputStream(inputStream1);
//
//
//        Map context = new HashMap();
//        for (Namespace n : model.getNamespaces()) {
//            context.put(n.getPrefix(), n.getName());
//        }
//
//
//        JsonLdOptions options = new JsonLdOptions();
////        Object compact = JsonLdProcessor.compact(jsonObject, context, options);
//
//
//        System.out.println("-------");
////        System.out.println(JsonUtils.toPrettyString(compact));
////        System.out.println(JsonUtils.toString(compact));
////        ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
////        ObjectOutputStream objectOutputStream=new ObjectOutputStream(byteArrayOutputStream);
////        objectOutputStream.writeObject(compact);
////        objectOutputStream.flush();
//
//
//        System.out.println("----------------COMPACT FORM-----------------------------------");
////        System.out.println(JsonUtils.toPrettyString(compact));
//        System.out.println("----------------COMPACT FORM-----------------------------------");
//
//
//        //-----------------------------------------------------------------------
////        RDFParser rdfParser = new TurtleParser();
////
////        Object rob = JsonLdProcessor.fromRDF(model);
////        System.out.println("-------------------------MODEL---------------");
////
////        System.out.println(model);
////        System.out.println("-------------------------MODEL---------------");
//
////        Object jsnobj = JsonUtils.fromInputStream(input);
////        Set<Namespace> namespaceSet = model.getNamespaces();
//
//
////        System.out.println(JsonUtils.toPrettyString(jsnobj));
//
////        RDFWriterRegistry rdfWriterRegistry = RDFWriterRegistry.getInstance();
////        Optional<RDFFormat> rdfFormat = rdfWriterRegistry.getFileFormatForMIMEType("application/ld+json");
////
////        JSONLDMode[] jsonldModes = new JSONLDMode[]{JSONLDMode.COMPACT, JSONLDMode.EXPAND, JSONLDMode.FLATTEN};
////        for (int i = 0; i < 3; i++) {
////            OutputStream outputStream = new ByteArrayOutputStream();
////
////            RDFWriter writer = Rio.createWriter(rdfFormat.get(), outputStream);
////            System.out.println("-------------------------outputstream---"+jsonldModes[i].getLabel()+"---------------");
////            writer.set(JSONLDSettings.JSONLD_MODE, jsonldModes[i]);
////            writer.startRDF();
////            for (Statement s : model) {
////                writer.handleStatement(s);
////            }
////            writer.endRDF();
////
////            System.out.println(outputStream.toString());
////            System.out.println("-------------------------outputstream---"+jsonldModes[i].getLabel()+"---------------");
////
////        }
//
//        //        writer.getWriterConfig().set(JSONLDSettings.JSONLD_MODE,JSONLDMode.COMPACT);
////        writer.getWriterConfig().set(JSONLDSettings.OPTIMIZE, true);
//
//        //-----------------------------------------------------------------------
//
////        Object compact = JsonLdProcessor.compact(jsonObject, context, options);
////
////        System.out.println("---------------------------------------------------");
////        System.out.println(JsonUtils.toPrettyString(compact));
////        System.out.println("---------------------------------------------------");
//
//    }

    private static void parse() {
        String rdf =
                "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
                        "PREFIX welcome: <http://welcome/services/1.0/> \n" +


                        "CONSTRUCT {\n" +
                        "?dip rdf:type welcome:DIP_request_info .\n" +
                        "?dip welcome:dip_TCNname ?TCNname .\n" +
                        "?dip welcome:dip_age ?age .\n" +
                        "?dip welcome:dip_countryOrigin ?country .\n" +
                        "?dip welcome:dip_residence_address_city ?city .\n" +
                        "?dip welcome:dip_residence_address_street ?street .\n" +
                        "?dip welcome:dip_residence_address_number ?streetNumber .\n" +
                        "?dip welcome:dip_time_arrival_current_residence ?arrival .\n" +
                        "}\n" +
                        "WHERE {\n" +
                        "?dip rdf:type welcome:DIP_request_info .\n" +
                        "?dip welcome:dip_TCNname ?TCNname .\n" +
                        "\t\t\t\t\t?dip welcome:dip_age ?age .\n" +
                        "\t\t\t\t\t?dip welcome:dip_countryOrigin ?country .\n" +
                        "\t\t\t\t\t?dip welcome:dip_residence_address_city ?city .\n" +
                        "\t\t\t\t\t?dip welcome:dip_residence_address_street ?street .\n" +
                        "\t\t\t\t\t?dip welcome:dip_residence_address_number ?streetNumber .\n" +
                        "\t\t\t\t\t?dip welcome:dip_time_arrival_current_residence ?arrival .\n" +
                        "\t\t\t\t}";

        String prx = "prefix";
        String ikiNoqte = ":";
        String iriInd = "<";
        String iriInd2 = ">";

        int prfInd = rdf.indexOf(prx);
        int iriIndx = rdf.indexOf(iriInd);
        int iriIndx2 = rdf.indexOf(iriInd2);
        System.out.println(rdf.substring(prfInd, iriIndx2));


        List<Namespace> namespaces = new ArrayList<>();

        String[] prefixArray = rdf.trim().split("CONSTRUCT");
//        System.out.println(prefixArray[0]);
        String[] prefixesArray = prefixArray[0].trim().split("PREFIX");

        for (int i = 1; i < prefixesArray.length; i++) {
            namespaces.add(new SimpleNamespace(prefixesArray[i].split(":")[0],
                    prefixesArray[i].split("(.)*(<)")[1].replace(">", "")));
//            prefixes.put(prefixesArray[i].split(":")[0],
//                    prefixesArray[i].split("(.)*(<)")[1].replace(">",""));
        }

//        for (String string : prefixesArray) {
//            prefixes.put(string.split(":")[0],
//                    string.split("(.)*(<)")[1].replace(">",""));
//        }

        String s = "rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n";
//        System.out.println("77777777777777777777777777");
//        for (Object str:prefixes.entrySet()) {
//            System.out.println("str = " + str);
//        }
        for (Namespace nms : namespaces) {
//            System.out.println("nms = " + nms);
        }
    }

    private static void queryParse() throws IOException/*, InvalidSPARQLException */{
        String query = "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
                "PREFIX welcome: <http://welcome/services/1.0/> \n" +
                "CONSTRUCT {\n" +
                "?dip rdf:type welcome:DIP_request_info .\n" +
                "?dip welcome:dip_TCNname ?TCNname .\n" +
                "?dip welcome:dip_age ?age .\n" +
                "?dip welcome:dip_countryOrigin ?country .\n" +
                "?dip welcome:dip_residence_address_city ?city .\n" +
                "?dip welcome:dip_residence_address_street ?street .\n" +
                "?dip welcome:dip_residence_address_number ?streetNumber .\n" +
                "?dip welcome:dip_time_arrival_current_residence ?arrival .\n" +
                "}\n" +
                "WHERE {\n" +
                "?dip rdf:type welcome:DIP_request_info .\n" +
                "?dip welcome:dip_TCNname ?TCNname .\n" +
                "?dip welcome:dip_age ?age .\n" +
                "?dip welcome:dip_countryOrigin ?country .\n" +
                "?dip welcome:dip_residence_address_city ?city .\n" +
                "?dip welcome:dip_residence_address_street ?street .\n" +
                "?dip welcome:dip_residence_address_number ?streetNumber .\n" +
                "?dip welcome:dip_time_arrival_current_residence ?arrival .\n" +
                "}";

//        SPARQLQuery sparqlQuery = new SPARQLQuery(query);

    }
/*
    private static void convertLocation2Coordinates(String location) throws IOException {
        location = "Paris, France";
        Geocoder geocoder = new Geocoder();
        GeocoderRequest geocoderRequest = new GeocoderRequestBuilder()
                .setAddress(location)
//                .setLanguage("en")
                .getGeocoderRequest();
//        geocoderRequest.setAddress(location);


        GeocodeResponse geocodeResponse = geocoder.geocode(geocoderRequest);

        GeocoderStatus geocoderStatus = geocodeResponse.getStatus();
        System.out.println("geocoderStatus.value() = " + geocoderStatus.value());
        System.out.println("geocoderStatus.name() = " + geocoderStatus.name());
        System.out.println("geocoderStatus.toString() = " + geocoderStatus.toString());
        List<GeocoderResult> geocoderResults = geocodeResponse.getResults();
        System.out.println("geocoderResults.size() = " + geocoderResults.size());
        for (GeocoderResult geocoderResult : geocoderResults) {
            GeocoderGeometry geocoderGeometry = geocoderResult.getGeometry();
            LatLng latLng = geocoderGeometry.getLocation();
            System.out.println("latLng.getLat() = " + latLng.getLat());
            System.out.println("latLng.getLng() = " + latLng.getLng());
        }
    }

    private static void geocoder() {
        try {
            URL url = new URL(
                    "https://maps.googleapis.com/maps/api/geocode/json?address="
                            + URIUtil.encodeQuery("Sayaji Hotel, Near balewadi stadium, pune") + "&sensor=false"
                            + "&key=AIzaSyA_CREjAE-du9BqC1_cKKBR2gq-h2k5g20");

            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");

            if (conn.getResponseCode() != 200) {
                throw new RuntimeException("Failed : HTTP error code : " + conn.getResponseCode());
            }
            BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())));

            String output = "", full = "";
            while ((output = br.readLine()) != null) {
                System.out.println(output);
                full += output;
            }
            System.out.println("full = " + full);
//            PincodeVerify gson = new Gson().fromJson(full, PincodeVerify.class);
//            response = new IsPincodeSupportedResponse(new PincodeVerifyConcrete(
//                    gson.getResults().get(0).getFormatted_address(),
//                    gson.getResults().get(0).getGeometry().getLocation().getLat(),
//                    gson.getResults().get(0).getGeometry().getLocation().getLng())) ;
//            try {
//                String address = response.getAddress();
//                Double latitude = response.getLatitude(), longitude = response.getLongitude();
//                if (address == null || address.length() <= 0) {
//                    log.error("Address is null");
//                }
//            } catch (NullPointerException e) {
//                log.error("Address, latitude on longitude is null");
//            }
            conn.disconnect();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void createModelFromZero() {

        /*
@prefix :         <http://www.dfki.de/SmartMaaS/feedback#> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml:     <http://www.w3.org/XML/1998/namespace> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix time:    <http://www.w3.org/2006/time#> .
@prefix geo:    <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@base <http://www.dfki.de/SmartMaaS/feedback> .

:Feedback1
    a :Feedback;
    :becauseOf ( [ a :TrafficJam ] [a :PotHole]);
    :hasTimestamp [
        time:xsdDateTime "CCYY-MM-DDThh:mm:ss.sss"^^xsd:dateTime ;
        :timeStampOf :Feedback1
    ];
    :causedDelay [
        time:hasXSDDuration ""^^xsd:Duration
    ];
    :atLocation [
        :locationOf :Feedback1;
        geo:long "12.34";
        geo:lat "2.34";
        :Address "adress"^^xsd:string
    ];
    :affects [
        a :Bus;
        :affectedBy :Feedback1;
        :Line "BusLine"^^xsd:string
    ] .
        :Feedback :instanceAmount "n".
*/
/*
        ValueFactory vf = SimpleValueFactory.getInstance();
        ModelBuilder modelBuilder = new ModelBuilder();

        String base = "http://www.dfki.de/SmartMaaS/feedback/";
        modelBuilder.setNamespace("base", "http://www.dfki.de/SmartMaaS/feedback#")
                .setNamespace("owl", "http://www.w3.org/2002/07/owl#")
                .setNamespace("rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
                .setNamespace("xml", "http://www.w3.org/XML/1998/namespace#")
                .setNamespace("xsd", "http://www.w3.org/2001/XMLSchema#")
                .setNamespace("rdfs", "http://www.w3.org/2000/01/rdf-schema#")
                .setNamespace("time", "http://www.w3.org/2006/time#")
                .setNamespace("geo", "http://www.w3.org/2003/01/geo/wgs84_pos#");


        Resource becauseOfHead = vf.createBNode();
        Resource timeStampHead = vf.createBNode();
        Resource delayHead = vf.createBNode();
        Resource locationHead = vf.createBNode();
        Resource vehicleHead = vf.createBNode();


        modelBuilder.subject("base:Feedback_n")
                .add(RDF.TYPE, "base:Feedback")
                .add("base:hasTimestamp", timeStampHead)
                .subject(timeStampHead)
                .add("time:xsdDateTime", "2020-11-26,23:18")
                .add("base:timeStampOf", "base:Feedback_n")
                .subject("base:Feedback_n")
                .add("base:causedDelay", delayHead)
                .subject(delayHead)
                .add("time:hasCSDDuration", "PT5M")
                .subject("base:Feedback_n")
                .add("base:atLocation", locationHead)
                .subject(locationHead)
                .add("base:locationOf", "base:Feedback_n")
                .add("geo:long", "12.36")
                .add("geo:lat", "2.3")
                .add("base:Address", "Waldhausweg 17")
                .subject("base:Feedback_n")
                .add("base:affects", vehicleHead)
                .subject(vehicleHead)
                .add(RDF.TYPE, "base:Bus")
                .add("base:affectedBy", "base:Feedback_n")
                .add("base:Line", "Berlin-Munich")
                .subject("base:Feedback_n")
                .add("base:becauseOf", becauseOfHead);


        List<IRI> reasons = Arrays.asList(vf.createIRI(base, "TrafficJam"), vf.createIRI(base, "Pothole"));
        List<Statement> statements = RDFCollections.asRDF(reasons, becauseOfHead, new ArrayList<>());

        Model model = modelBuilder.build();


        model.addAll(statements);

        /*:Feedback1
    a :Feedback;
    :becauseOf ( [ a :TrafficJam ] [a :PotHole]);
    :hasTimestamp [
        time:xsdDateTime "CCYY-MM-DDThh:mm:ss.sss"^^xsd:dateTime ;
        :timeStampOf :Feedback1
    ];
    :causedDelay [
        time:hasXSDDuration ""^^xsd:Duration
    ];
    :atLocation [
        :locationOf :Feedback1;
        geo:long "12.34";
        geo:lat "2.34";
        :Address "adress"^^xsd:string
    ];
    :affects [
        a :Bus;
        :affectedBy :Feedback1;
        :Line "BusLine"^^xsd:string
    ] .
        :Feedback :instanceAmount "n".*/
/*
        System.out.println("Begin------1111111111111111------------");
//        printModel(model);
        System.out.println("model.toString() = \n" + model.toString());
        StringBuilder stringBuilder = new StringBuilder();
        for (Statement s : model) {
            stringBuilder.append(s);
        }
        String stringOfModel = stringBuilder.toString();
        System.out.println("stringOfModel = \n" + stringOfModel);
        System.out.println("End------1111111111111111------------");

        System.out.println("Begin------2222222222222------------");

        String string_model = null;
        try {
            OutputStream outputStream = new ByteArrayOutputStream();
            RDFWriter rdfWriter = Rio.createWriter(RDFFormat.TURTLE, outputStream);
            Rio.write(model, rdfWriter);

            string_model = outputStream.toString();
            outputStream.close();
            System.out.println(string_model);

        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
        System.out.println("End------2222222222222------------");

        System.out.println("Begin------3333333333333333------------");
        string_model = string_model.replaceAll("Feedback_n", "Feedback_5");
        System.out.println("string_model = " + string_model);
        System.out.println("End------3333333333333333------------");

        System.out.println("Begin------44444444444444------------");

        InputStream inputStream = new ByteArrayInputStream(string_model.getBytes());
        Model new_model = null;
        try {
            new_model = Rio.parse(inputStream, base, RDFFormat.TURTLE);
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
        printModel(new_model);
        System.out.println("End------44444444444444------------");


        System.out.println("Begin------555555555555555------------");

        InputStream inputStream2 = new ByteArrayInputStream(stringOfModel.getBytes());
        Model new_model2 = null;
        try {
            new_model2 = Rio.parse(inputStream2, base, RDFFormat.TURTLE);
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
        printModel(new_model2);
        System.out.println("End------555555555555555------------");
    }

    private static void convert2CollectionTest() {
        String ns = "http://www.dfki.de/SmartMaaS/feedback/";
        ValueFactory vf = SimpleValueFactory.getInstance();

// IRI for ex:favoriteLetters
        IRI beauseOf = vf.createIRI(ns, "becauseOf");
// IRI for ex:John
        IRI feedback = vf.createIRI(ns, "Feedback1");
// create a list of letters
        IRI tJam = vf.createIRI(ns, "Jam");

        List<Literal> reasons = Arrays.asList(vf.createLiteral(ns, "TrafficJam"), vf.createLiteral(ns, "Pothole"));
        List<IRI> iris = Arrays.asList(tJam, vf.createIRI(ns, "Pothole"));

        // create a head resource for our list
        Resource head = vf.createBNode();
// convert our list and add it to a newly-created Model
//        Model model = RDFCollections.asRDF(iris, head, new LinkedHashModel());

        ModelBuilder modelBuilder = new ModelBuilder();
        modelBuilder.setNamespace(":", "http://www.dfki.de/SmartMaaS/feedback");
        modelBuilder.subject(":Feedback1")
                .add(RDF.TYPE, "Feedback")
                .add(beauseOf, head);

        List<Statement> statements = RDFCollections.asRDF(iris, head, new ArrayList<>());
        Model model = modelBuilder.build();
        model.addAll(statements);

// set the ex:favoriteLetters property to link to the head of the list
//        model.add(feedback, beauseOf, head);

//        model.add(feedback, beauseOf, head);

        printModel(model);
    }

    private static void getBytesFromRDF4JModel() {
        ModelBuilder modelBuilder = new ModelBuilder();
        Model model = modelBuilder.build();


    }

    private static void testingRegex() {
        String str = "http://www.dfki.de/SmartMaaS/feedback#Feedback014568";
        String regex = ".+#(Feedback|feedback)\\d+";
        String uful = str.replaceAll(".+#(Feedback|feedback)", "");
        boolean res = str.matches(regex);
        System.out.println("res = " + res);
        System.out.println("uful = " + uful);

    }

    private static void testingBlankNode() {
        ValueFactory valueFactory = SimpleValueFactory.getInstance();

        BNode bNode = valueFactory.createBNode();
        IRI bob = valueFactory.createIRI("http://example.org/Blanknode");
        IRI name = valueFactory.createIRI("http://example.org/is");
        Literal literal = valueFactory.createLiteral("BOB");
        IRI iri = valueFactory.createIRI("http://example.org/BlankNode");


        Statement statement = valueFactory.createStatement(bob, name, bNode);

        Model model = new LinkedHashModel();
        model.add(statement);
        model.add(bNode, name, bob);

        System.out.println("statement.toString() = " + statement.toString());


        printModel(model);
    }

    private static void testingCreateLiteralWithXSDString() {
        ValueFactory valueFactory = SimpleValueFactory.getInstance();
        Literal literal = valueFactory.createLiteral("salam", valueFactory.createIRI("http://www.w3.org/2001/XMLSchema#", "Duration"));
        System.out.println(literal);
        Literal literal1 = valueFactory.createLiteral("eleyke", "xsd:Duration");
        System.out.println("literal1 = " + literal1);

    }

*/}
}