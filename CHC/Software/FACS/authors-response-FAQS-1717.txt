
1. Author Response

    We thank the reviewers for their comments. The CSG problem is very hard and very few exact algorithms can run with more than 27 agents. The full input for 27 agents is 2^27-1=134217727 coalitions (making it very hard to solve even for heuristics)
    REVIEWER 4:
    1)FACS uses a new representation and new techniques never proposed before for CSG. It proposes a new way of searching coalition structures. This is why we have detailed the algorithms. Theorem 1 guarantees a certain diversity in the generated coalition structures (See answer 17 below)
    2)We tested FACS and compared it with CSG-UCT using the code provided by its authors. We run thousands of instances and it did not give exact results. The quality of solutions provided by CSG-UCT was lower than those of ODP-IP. This can be verified by running the code of the authors of CSG-UCT
    3)FACS does not search all the coalition structures in each partition, it searches only a subset of them. Thus, it is difficult to give theoretical quality guarantees. In Sandholm's work, they give a guarantee, because they explore, in certain partitions all the coalition structures, which makes it possible to compute the worst-case guarantee. Compared with CSG-UCT, FACS performs well in terms of solution quality for many distributions while providing good quality intermediate solutions faster (see figure 9)
    4.”Estimate the number of non-generated coalition structures” The principle of algorithm 2 of FACS is to avoid generating all permutations, which would make the search time higher. To control the number of non-generated coalition structures, we can add a new condition in algorithm 2 and force it to generate at least a certain number of permutations
    5.Using a complete set of coalitions means that our algorithm has as input all the 2^n-1 coalitions
    6.“Regarding the number 27” When we compared our algorithm for full inputs with the existing state of the art ODP-IP, we noticed that the code of ODP-IP provided by authors cannot handle more than 27 agents. Inside the code of ODP-IP, the authors have clearly written the limit of ODP-IP (see this link https://github.com/trahwan/ODP-IP_and_InclusionExclusion)
    8.[it is not a set..]: As said in the paper, in lines 105 to 117, with the SET of numbers, FACS generates vectors of codes, which represent the coalition structures. So it is a SET.
    9."value of k, node should be part of the input“: Since we have access to the size of a coalition C via size(C), there is no need to have the node as part of the input
    10.“Figure5: you should discuss..“. FACS can generate all the permutations. However, in Figure 5 we have shown an example with only one combination [0 1 2 2]. If FACS applies the same principle, for example with the combination [2 2 1 0], it will generate coalition structures where agents 1 and 2 are in the same coalition
    11.”Algorithm2: size(j)+a is incorrect”. To solve this problem, we will add a variable g, which will denote the index of the first agent of the next coalition. g will be initialized to 1. We will add this new line (g <- g + size(j)) between the current lines numbered 2 and 3, and adjust the loop of the current line 4 to start with l = g to n (instead of l=size(j)+a). With this, g will always represent the first agent of the next coalition
    12."generate a large number of different coalition structures". Algorithm 3 is used to reduce the number of combinations to consider. Figure 6 gives an example and shows that we do not need to consider all combinations and thus avoid a repeated generation of the same coalition structures
    13.“seems to me that also line b..” Yes, line b corresponds to the same coalition structure. However, Figure 6 is used to give an example that shows that we need to prune some combinations (as done by algorithm 3)
    14.“size(Ci^j) returns the size of the coalition” Same answer as 9.
    15.“why does considering more initializations makes it faster” If we consider only one initialization (as in the example [0 1 2 2] in Figure 5) and use a naive method to find all the combinations, we are sure to find the optimal solution, but with a very high time. FACS uses different initializations to reduce the number of generated permutations in order to speed up the search process. However, by doing so, FACS loses the guarantee of providing the optimal solution
    16.why above 6 And just 2 initializations? Based on the tests that we conducted, we found that going above level 6 is extremely time consuming and that no significant improvement on the solution quality was observed (Please see the explanation in lines 330 – 335). For the number of initializations, FACS uses two. It can use more, but for a longer search time. One initialization would not be sufficient to generate different coalition structures
    17.“Theorem 1” For the sake of clarity, theorem 1 will be adjusted as follows:
    In each partition, FACS guarantees that for each agent a_i, there are at least 2*k coalition structures in which a_i appears in a coalition of size k
    This property is desirable because it guarantees a certain diversity between the generated coalition structures
    18.”Algorithm 4 The best coalition": No, here it returns the best coalition structure among those evaluated. It is not guaranteed to be optimal. This is why we have used the symbol CS+ instead of CS*, which refers to the optimal one
    19"ODP-IP cannot be run with more than 27 agents" See the answer 6
    20."to provide a good quality solution (99%)": No, we have only given here the solution quality provided by FACS on average in the case of 25 agents with the Normal distribution when FACS is run to completion. However, FACS took 0.013% of the total time taken by ODP-IP
    Answers for the rebuttal questions
    21)“What is new..“ Using combinations in FACS allows listing fewer permutations and therefore fewer coalition structures. The advantage of this compact representation is to allow a faster search of solutions. As our algorithm proposes a guided search through the integer partition graph and eliminates unsuccessful combinations, we obtained better runtimes
    22)“only permutations of two agents?“ If we permute more than 2 agents, since FACS searches the nodes of the IP graph, at a certain level of this graph, we may have to permute several agents (which would take time) with no guarantee to generate irredundant coalition structures. The further we move from the first level (containing the grand coalition) the more time will be needed to compute the permutations, especially when we have repeated parts in a partition (as in [1,1,1,1,1,1,1,2,3])
    23) Algorithm 3 eliminates only repeated solutions
    Reviewer 3:
    1.Our algorithm goes beyond 28 agents when using a complete set of coalition values and remains fast. For example, for 30 agents with the Normal distribution, FACS provides a near-optimal solution in about 10ms. These results are appealing for application domains where time is limited
    2.If we consider only one initialization (as in the example [0 1 2 2] in Figure 5) and use a naive method to find all the combinations, we are sure to find the optimal solution, but with a very high time. FACS uses different initializations to reduce the number of generated permutations in order to speed up the search process. However, by doing so, FACS loses the guarantee of providing the optimal solution
    Reviewer 1:
    1.FACS fails to find the optimal solution when the vector that represents the optimal solution cannot be generated by the two phases of FACS
    2.FACS performs less well with some distributions, which distribute the coalition values in such a way that the optimal or near-optimal solutions are regrouped in just few partitions. Since FACS searches only a subset of the coalition structures in each partition, it performs less well
    Reviewer5: From our experiments, we observed that below 27 agents, FACS outperforms CSG-UCT on many distributions. Figures 8 and 9 discuss the results for more than 27 agents. But FACS can also be run with more than 30 agents

